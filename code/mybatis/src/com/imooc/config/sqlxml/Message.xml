<?xml version="1.0" encoding="UTF-8"?>
<!--

       Copyright 2009-2012 the original author or authors.

       Licensed under the Apache License, Version 2.0 (the "License");
       you may not use this file except in compliance with the License.
       You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

       Unless required by applicable law or agreed to in writing, software
       distributed under the License is distributed on an "AS IS" BASIS,
       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       See the License for the specific language governing permissions and
       limitations under the License.

-->

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--相同的namespace下的id是不能重复的，这个是必须要写的，这个我们一般些全类名-->
<mapper namespace="com.imooc.bean.Message">

	<!--
		配置映射关系
		配置数据库表中的字段，对应java实体类中的字段，如果不配置需要实体类中的属性与数据库表中的字段一致
		type即对应的实体类名
		id：取一个唯一的值就行，起到唯一标识的作用，不用与select中的id一致，但是需要与select标签中的resultMap的值一致
	-->
  <resultMap type="com.imooc.bean.Message" id="MessageResult">
	  <!--column 是数据库中字段的名成，property是表对应的试题类Message中的字段
	  	jdbcType,可以在java.sql.Types中找到对应的常量
	  -->
    <id column="id" jdbcType="INTEGER" property="id"/><!--如果数据库的字段作为主键，则使用id标签-->
    <result column="command" jdbcType="VARCHAR" property="command"/><!--如果数据库的字段是普通的列，则使用result标签-->
    <result column="description" jdbcType="VARCHAR" property="description"/>
    <result column="content" jdbcType="VARCHAR" property="content"/>
  </resultMap>

<!-- select标签用于书写查询select语句
	parameterType是传入的查询参数类型，如果是基本数据类，只需要写类型，不许需要写全类名
	resultMap与前边的resultMap的id对应
-->
  <select id="queryMessageList" parameterType="com.imooc.bean.Message" resultMap="MessageResult">
    select id,command,description,content from message
	  <where><!--
    		test中书写布尔表达式，如果成功则拼接下边的条件, command是parameterType中的成员变量
    		拼接sql的时候会将‘#{command}’替换成?,取值类似于ognl,拼接sql的时候不需要关注空格是否匹配
    		-->
		  <if test="command != null and !&quot;&quot;.equals(command.trim())">
			  and command=#{command}
		  </if>
		  <!-- like 查询一般会拼接concat()拼接两个字符串
		    !&quot;&quot;.equals(description.trim()) 也可以换为 ''!=description.trim()
		   -->
		  <if test="description != null and ''!=description.trim()">
			  and description like concat(concat('%',#{description}),'%')
		  </if>
	  </where>
  </select>

	<!--单条删除
	   基本数据类型作为传参，只能传入一个。通过#{参数名}或者是#{_parameter} 即可获取传入的值 ，复杂数据类型：包含JAVA实体类、Map。通过#{属性名}或#{map的KeyName}即可获取传入的值
	-->
	<delete id="deleteOne" parameterType="int">
		delete from message where id = #{id}
	</delete>

    <!--批量删除
    如果是List,使用 foreach标签遍历出list中的值 collection="list" 一般是固定 的去list的值
  		item接收list中遍历出每一个值，sepatator中的值表示分割符号"," mybatis会自动去除最后一个","
    -->
    <delete id="deleteBatch" parameterType="java.util.List">
        delete from message where id in(
        <foreach collection="list" item="item" separator=",">
            #{item},
        </foreach>
        )
    </delete>

</mapper>